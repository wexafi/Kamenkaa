import asyncio
import random
import time
from aiogram.dispatcher.filters import Command
import aiosqlite
from aiogram import types
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
API_TOKEN = '8152607752:AAFhdDLKJEFKtPMCaZtS6oqgSRnf6Go1-fQ'
DATABASE = 'database.db'  # –ü—É—Ç—å –∫ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
ALLOWED_CHAT_ID = -1002281073520
LOD_CHAT = -1002297311385
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class DuelStates(StatesGroup):
    waiting_for_accept = State()
    battling = State()

async def db_setup():
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, coins INTEGER DEFAULT 0, last_bonus INTEGER DEFAULT 0, last_duel INTEGER DEFAULT 0)')
        await db.execute('CREATE TABLE IF NOT EXISTS duels (id INTEGER PRIMARY KEY, challenger_id INTEGER, opponent_id INTEGER, bet INTEGER, accepted INTEGER, winner_id INTEGER)')
        await db.commit()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if message.chat.id != ALLOWED_CHAT_ID:
        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ.")
    else:
        async with aiosqlite.connect(DATABASE) as db:
            await db.execute('INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)', (message.from_user.id, message.from_user.username))
            await db.commit()
        await message.answer("üî•–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!\n–í–≤–µ–¥–∏—Ç–µ '/—Ö–µ–ª–ø' –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")


@dp.message_handler(regexp='—Ö–µ–ª–ø')
async def help(message: types.Message):
    if message.chat.id != ALLOWED_CHAT_ID:
        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ.")
    else:
        text = ("üìÉ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
                "/start - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.\n"
                "/—Ö–µ–ª–ø - –í—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                "–ï–± - –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å (—Ä–∞–∑ –≤ 24 —á–∞—Å–∞). –°–∏–Ω–æ–Ω–∏–º—ã: \'–µ–±\'.\n"
                "–î—É—ç–ª—å - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –¥—É—ç–ª—å. –°–∏–Ω–æ–Ω–∏–º—ã: \'–¥—É—ç–ª—å\'.\n"
                "–ë–∞–ª–∏–∫ - –í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å Kamenk-coins. –°–∏–Ω–æ–Ω–∏–º—ã: \'–±–∞–ª–∏–∫\'.\n")
        await message.answer(text)


@dp.message_handler(regexp='–ï–±|–µ–±')
async def bonus_command(message: types.Message):
    if message.chat.id != ALLOWED_CHAT_ID:
        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ.")
    else:
        async with aiosqlite.connect(DATABASE) as db:
            cursor = await db.execute('SELECT coins, last_bonus FROM users WHERE id = ?', (message.from_user.id,))
            row = await cursor.fetchone()
            
            if row is None:
                await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")
                return
            
            coins, last_bonus = row
            current_time = int(time.time())
            if current_time - last_bonus < 86400:
                await message.answer("üî• –ë–æ–Ω—É—Å —É–∂–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏.")
                return
            
            bonus_amount = random.randint(10, 20)
            await db.execute('UPDATE users SET coins = coins + ?, last_bonus = ? WHERE id = ?', (bonus_amount, current_time, message.from_user.id))
            await db.commit()
            
            await message.answer(f"ü™ô –í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus_amount} Kamenk-coins.")

@dp.message_handler(regexp='–¥—É—ç–ª—å|–î—É—ç–ª—å')
async def duel_command(message: types.Message, state: FSMContext):
    if message.chat.id != ALLOWED_CHAT_ID:
        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ.")
    else:
        parts = message.text.split()
        
        if len(parts) < 3:
            await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /–¥—É—ç–ª—å @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ-Kamenk-coin")
            return

        opponent_username = parts[1].strip().lstrip('@/')  # –£–¥–∞–ª—è–µ–º '@' –µ—Å–ª–∏ –µ—Å—Ç—å

        try:
            bet = int(parts[2])
        except ValueError:
            await message.answer("ü™ô –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Kamenk-coin –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        if bet < 5:
            await message.answer("ü™ô –°—Ç–∞–≤–∫–∞ –Ω–∞ –¥—É—ç–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 Kamenk-coins.")
            return

        if opponent_username == message.from_user.username:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–∏ —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å.")
            return

        current_time = int(time.time())

        async with aiosqlite.connect(DATABASE) as db:
            cursor = await db.execute('SELECT coins, last_duel FROM users WHERE id = ?', (message.from_user.id,))
            row = await cursor.fetchone()
            
            if row is None:
                await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")
                return

            user_coins, last_duel = row
            
            if user_coins < bet:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Kamenk-coin –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            if current_time - last_duel < 20:  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
                remaining_time = 20 - (current_time - last_duel)
                await message.answer(f"‚ùó –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /–¥—É—ç–ª—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            await db.execute('UPDATE users SET last_duel = ? WHERE id = ?', (current_time, message.from_user.id))

            opponent_cursor = await db.execute('SELECT id FROM users WHERE username = ?', (opponent_username,))
            opponent_row = await opponent_cursor.fetchone()

            if opponent_row is None:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{opponent_username} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.")
                return

            await db.execute(
                'INSERT INTO duels (challenger_id, opponent_id, bet, accepted) VALUES (?, ?, ?, ?)',
                (message.from_user.id, opponent_row[0], bet, 0)
            )
            await db.commit()

            duel_id = (await (await db.execute('SELECT last_insert_rowid()')).fetchone())[0]

            await bot.send_message(LOD_CHAT,f"–î—É—ç–ª—å —Å–æ–∑–¥–∞–Ω–∞! ID –¥—É—ç–ª–∏: {duel_id}")

        keyboard = InlineKeyboardMarkup(row_width=2)
        accept_button = InlineKeyboardButton("‚úîÔ∏è –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'accept_duel:{duel_id}:{opponent_row[0]}')
        decline_button = InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f'decline_duel:{duel_id}:{opponent_row[0]}')
        keyboard.add(accept_button, decline_button)

        await state.update_data(duel_id=duel_id)
        await message.answer(f"üîä –í–Ω–∏–º–∞–Ω–∏–µ @{opponent_username}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å!\nü™ô –°—Ç–∞–≤–∫–∞: {bet} Kamenk-coin", reply_markup=keyboard)


async def start_duel(duel_id, callback_query):
    if callback_query.message is None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return

    chat_id = callback_query.message.chat.id

    async with aiosqlite.connect(DATABASE) as db:
        cursor = await db.execute('SELECT challenger_id, opponent_id, bet FROM duels WHERE id = ?', (duel_id,))
        duel_info = await cursor.fetchone()

    if duel_info is None:
        await bot.send_message(chat_id, "‚ùå –î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π

    challenger_id, opponent_id, bet = duel_info
  
    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
    async with aiosqlite.connect(DATABASE) as db:
        cursor = await db.execute('SELECT username FROM users WHERE id IN (?, ?)', (challenger_id, opponent_id))
        usernames = await cursor.fetchall()
    
    challenger_username = usernames[0][0]
    opponent_username = usernames[1][0]
    
    health = {
        challenger_id: 100,
        opponent_id: 100
    }

    turn = challenger_id  # –ù–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–≤—ã–π
    battle_result = []

    await bot.send_message(chat_id, f"–î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å –º–µ–∂–¥—É @{challenger_username} –∏ @{opponent_username}!")

    while health[challenger_id] > 0 and health[opponent_id] > 0:
        damage = random.randint(5, 50)
        health[turn] -= damage
        
        battle_message = f"‚öîÔ∏è –ò–≥—Ä–æ–∫ {challenger_username if turn == challenger_id else opponent_username} –Ω–∞–Ω–µ—Å {damage} —É—Ä–æ–Ω–∞.\n\nüõ°Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –∑–¥–æ—Ä–æ–≤—å—è —É {opponent_username}: {health[challenger_id]}\nüõ°Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –∑–¥–æ—Ä–æ–≤—å—è —É {challenger_username}: {health[opponent_id]}."
        battle_result.append(battle_message)
        await bot.send_message(chat_id, battle_message)

        await asyncio.sleep(2)

        if health[challenger_id] <= 0 or health[opponent_id] <= 0:
            winner = challenger_id if health[opponent_id] <= 0 else opponent_id
            loser = challenger_id if winner == opponent_id else opponent_id
            break

        turn = opponent_id if turn == challenger_id else challenger_id

    await finish_duel(duel_id, winner, loser, bet, chat_id)

async def finish_duel(duel_id, winner_id, loser_id, bet, chat_id):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute('UPDATE users SET coins = coins + ? WHERE id = ?', (bet, loser_id))
        await db.execute('UPDATE users SET coins = coins - ? WHERE id = ?', (bet, winner_id))
        await db.execute('DELETE FROM duels WHERE id = ?', (duel_id,))
        await db.commit()

        cursor = await db.execute('SELECT username FROM users WHERE id = ?', (loser_id,))
        winner_data = await cursor.fetchone()
        winner_username = winner_data[0] if winner_data else "Unknown User"

    await bot.send_message(chat_id, f"üèÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner_username}!\nü™ô –°—Ç–∞–≤–∫–∞ –±—ã–ª–∞ {bet}")

@dp.callback_query_handler(lambda c: c.data.startswith('accept_duel:'))
async def accept_duel(callback_query: types.CallbackQuery):
    duel_id, opponent_id = map(int, callback_query.data.split(':')[1:])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–∏–Ω—è–≤—à–∏–π –¥—É—ç–ª—å, —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º
    if callback_query.from_user.id != opponent_id:
        await callback_query.answer("‚ùå –≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å!")
        return
    
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute('UPDATE duels SET accepted = 1 WHERE id = ?', (duel_id,))
        await db.commit()

    await callback_query.answer("‚úîÔ∏è –í—ã –ø—Ä–∏–Ω—è–ª–∏ –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å!")
    await start_duel(duel_id, callback_query)

@dp.callback_query_handler(lambda c: c.data.startswith('decline_duel:'))
async def decline_duel(callback_query: types.CallbackQuery):
    duel_id, opponent_id = map(int, callback_query.data.split(':')[1:])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–∫–∞–∑–∞–≤—à–∏–π –æ—Ç –¥—É—ç–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º
    if callback_query.from_user.id != opponent_id:
        await callback_query.answer("‚ùå –≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å!")
        return

    async with aiosqlite.connect(DATABASE) as db:
        await db.execute('DELETE FROM duels WHERE id = ?', (duel_id,))
        await db.commit()

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–∞ –¥—É—ç–ª—å
    await callback_query.message.delete()
    
    await callback_query.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –¥—É—ç–ª–∏.")


@dp.message_handler(regexp='–ë–∞–ª–∏–∫|–±–∞–ª–∏–∫')
async def balance_command(message: types.Message):
    if message.chat.id != ALLOWED_CHAT_ID:
        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ.")
    else:
        async with aiosqlite.connect(DATABASE) as db:
            cursor = await db.execute('SELECT coins FROM users WHERE id = ?', (message.from_user.id,))
            row = await cursor.fetchone()
            if row is None:
                await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")
                return
            await message.answer(f"ü™ô –í–∞—à –±–∞–ª–∞–Ω—Å: {row[0]} Kamenk-coins.")


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(db_setup())
    executor.start_polling(dp, skip_updates=True)
